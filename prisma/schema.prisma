// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  name         String
  email        String         @unique
  password     String
  active       Boolean        @default(true)
  createdAt    DateTime       @default(now())
  avatar       String?
  address      Address        @relation(fields: [addressId], references: [id])
  orders       Order[]
  addressId    String
  ShoppingCart ShoppingCart[]
  roles        String[]    @default([])
  permissions  String[]    @default([]) 

  @@map("users")
}

model Address {
  id           String  @id @default(uuid())
  street       String
  number       String
  cep          Int
  city         String
  neighborhood String
  complement   String?
  state        State   @relation(fields: [stateId], references: [id])
  owners       Owner[]
  users        User[]
  orders       Order[]
  stateId      String

  @@map("address")
}

model State {
  id        String    @id @default(uuid())
  name      String    @unique
  country   String
  addresses Address[]

  @@map("states")
}

model Owner {
  id         String    @id @default(uuid())
  name       String
  createdAt  DateTime  @default(now())
  cnpj       Int
  addressId  String
  address    Address   @relation(fields: [addressId], references: [id])
  reputation Float
  avatar     String?
  products   Product[]
  password   String
  email      String    @unique
  orders     Order[]

  @@map("owners")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String
  products    Product[]

  @@map("categories")
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String
  price       Float
  avatar      String
  stock       Int
  createdAt   DateTime    @default(now())
  owner       Owner       @relation(fields: [ownerId], references: [id])
  category    Category    @relation(fields: [categoryId], references: [id])
  itemOrders  ItemOrder[]

  ownerId    String
  categoryId String

  @@map("products")
}

model ItemOrder {
  id        String  @id @default(uuid())
  productId String
  product   Product @relation(fields: [productId], references: [id])
  amount    Int
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])

  shoppingCarts ShoppingCart[]

  @@map("itemOrders")
}

model Order {
  id           String      @id @default(uuid())
  createdAt    DateTime    @default(now())
  deliveryDate DateTime
  status       Boolean     @default(false)
  itemOrders   ItemOrder[]
  user         User        @relation(fields: [userId], references: [id])
  owner        Owner       @relation(fields: [ownerId], references: [id])
  address      Address     @relation(fields: [addressId], references: [id])

  userId    String
  ownerId   String
  addressId String

  @@map("orders")
}

model ShoppingCart {
  id         String      @id @default(uuid())
  user       User        @relation(fields: [userId], references: [id])
  itemOrders ItemOrder[]

  userId String

  @@map("shoppingCarts")
}

model Role {
  id          String   @id @default(uuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  userId      String?

  @@map("roles")
}

model Permission {
  id          String   @id @default(uuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  userId      String?

  @@map("permission")
}
